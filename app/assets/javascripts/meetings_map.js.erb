var allMarkers = [];
var infowindow;
var markerInfoWindow;
var map;

function initialize_map() {
    var latlng = new google.maps.LatLng(39.8282, -98.5795);
    var options = {
        zoom: 4,
        center: latlng,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        zoomControlOptions: {
            style: google.maps.ZoomControlStyle.DEFAULT,
        }
    }

    map = new google.maps.Map(document.getElementById("map-canvas"), options);
    var html = "<div id='infowindow-content'>" +
            "<table>" +
            "<tr><td>Name:</td> <td><input type='text' id='name'/> </td> </tr>" +
            "<tr><td>Email:</td> <td><input type='text' id='email'/> </td> </tr>" +
            "<tr><td>Phone: </td><td><input type='text' id='phone'/></td></tr>" +
            "<tr><td>Activity:</td> <td><select id='meeting_type'>" +
            "<option value='coffee' SELECTED>Coffee</option>" +
            "<option value='beer'>Beer</option>" +
            "<option value='other'>Other</option>" +
            "</select> </td></tr>" +
            "<tr><td></td><td><input type='button' value='Join Us!' onclick='saveData()'/></td></tr></table>" +
            "</div>";

    infowindow = new google.maps.InfoWindow({
        content: html
    });

    markerInfoWindow = new google.maps.InfoWindow({
    });

    // Create the search box and link it to the UI element.
    var input = /** @type {HTMLInputElement} */(
            document.getElementById('pac-input'));
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

    var searchBox = new google.maps.places.SearchBox(
            /** @type {HTMLInputElement} */(input));

    // [START region_getplaces]
    // Listen for the event fired when the user selects an item from the
    // pick list. Retrieve the matching places for that item.
    google.maps.event.addListener(searchBox, 'places_changed', function () {
        var places = searchBox.getPlaces();

        if (places.length == 0) {
            return;
        }

        // For each place, get the icon, place name, and location.
        var bounds = new google.maps.LatLngBounds();
        for (var i = 0, place; place = places[i]; i++) {
            var image = {

                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(25, 25)
            };

            if (allMarkers.length >= 1) allMarkers.pop().setMap(null);

            var marker = new google.maps.Marker({
                map: map,
                title: place.name,
                draggable: true,
                position: place.geometry.location
            });

            allMarkers.push(marker);
            infowindow.open(map, marker);


            bounds.extend(place.geometry.location);
        }

        map.fitBounds(bounds);
        map.setZoom(14);
    });
    google.maps.event.addListener(map, "click", function (event) {

        if (allMarkers.length >= 1) allMarkers.pop().setMap(null);
        var marker = new google.maps.Marker({
            map: map,
            draggable: true,
            position: event.latLng
        });
        allMarkers.push(marker);
        infowindow.open(map, marker);
    });

    google.maps.event.addListener(infowindow, 'closeclick', function () {
        allMarkers.pop().setMap(null); // remove the corresponding marker
    });

    google.maps.event.addListener(map, 'bounds_changed', function () {
        var bounds = map.getBounds();
        searchBox.setBounds(bounds);
    });

    console.log(gon.markers);
    placeDBMarkers(map, gon.markers)

}

function loadScript() {

    var script = document.createElement('script');
    var src = "http://maps.google.com/maps/api/js?libraries=places&sensor=false&callback=initialize_map&key=";
    script.type = 'text/javascript';
    script.src = src;
    document.body.appendChild(script);

}

function saveData() {

    if (!validateForm({email: $('#email'), phone: $('#phone')}))
        return;

    var email = $('#email').val();
    var name = $('#name').val();
    var phone = $('#phone').val();
    var meeting_type = $('#meeting_type').val();
    gon.allMarkers = allMarkers;
    var lastMarker = allMarkers.pop();
    var latitude = lastMarker.getPosition().lat().toString();
    var longitude = lastMarker.getPosition().lng().toString();
    var dataSet = {"email": email, "name": name, "phone": phone, "meeting_type": meeting_type,
        "latitude": latitude, "longitude": longitude};
    infowindow.close();

    $.ajax({
        url: '/meetings',
        type: 'POST',
        data: dataSet
    });
}

function placeDBMarkers(map, markerSet) {
    var markersForCluster = [];
    for (var i = 0; i < markerSet.length; i++) {
        if (markerSet[i].latitude && markerSet[i].longitude) {
            console.log(markerSet[i]);
            var archiveMarker = new google.maps.Marker({
                map: map,
                name: markerSet[i].name,
                position: {lat: markerSet[i].latitude, lng: markerSet[i].longitude}
            });
            google.maps.event.addListener(archiveMarker, 'mouseover', function () {
                markerInfoWindow.setContent("<div class='hover_name'><strong>" + this.name + "</strong></div>");
                markerInfoWindow.open(map, this);
                $(".gm-style-iw").next("div").hide();
            });
            google.maps.event.addListener(archiveMarker, 'mouseout', function () {
                markerInfoWindow.close();
            });
            markersForCluster.push(archiveMarker);
        }
    }

    var markerCluster = new MarkerClusterer(map, markersForCluster);
}
